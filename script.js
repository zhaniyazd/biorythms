const people = [
    { 
        id: 'diana', 
        name: '–î–∏–∞–Ω–∞', 
        birthday: '2002-07-09', 
        colors: {
            physical: '#FF0000',   
            emotional: '#d94646',   
            intellectual: '#55080d'  
        }
    },
    { 
        id: 'kashtanka', 
        name: '–ö–∞—à—Ç–∞–Ω–∫–∞', 
        birthday: '2008-08-17', 
        colors: {
            physical: '#bd00db',   
            emotional: '#e350e8',  
            intellectual: '#760b7d' 
        }
    },
    { 
        id: 'lera', 
        name: '–õ–µ—Ä–∞', 
        birthday: '2005-02-28', 
        colors: {
            physical: '#00FF00',   
            emotional: '#66FF66', 
            intellectual: '#036706' 
        }
    },
    { 
        id: 'lima', 
        name: '–õ–∏–º–∞', 
        birthday: '2008-07-30', 
        colors: {
            physical: '#FFFF00',   
            emotional: '#FFFF66',  
            intellectual: '#a1a100' 
        }
    },
    { 
        id: 'masha', 
        name: '–ú–∞—à–∞', 
        birthday: '1996-12-19', 
        colors: {
            physical: '#f15f7e',   
            emotional: '#F48FB1',  
            intellectual: '#F8BBD0'
        }
    },
    { 
        id: 'sonya', 
        name: '–°–æ–Ω—è', 
        birthday: '2008-08-27', 
        colors: {
            physical: '#0000FF',   
            emotional: '#6666FF',  
            intellectual: '#AAAAFF' 
        }
    },
    { 
        id: 'dasha', 
        name: '–î–∞—à–∞', 
        birthday: '2005-10-24', 
        colors: {
            physical: '#FFA500',   
            emotional: '#FFBB33',  
            intellectual: '#FFD27F' 
        }
    },
    { 
        id: 'zhaniya', 
        name: '–ñ–∞–Ω–∏—è', 
        birthday: '2005-03-12', 
        colors: {
            physical: '#e4c482',  
            emotional: '#b08354', 
            intellectual: '#9c662d' 
        }
    },
    { 
        id: 'leriya', 
        name: '–õ–µ—Ä–∏—è', 
        birthday: '2005-03-08', 
        colors: {
            physical: '#00bda1',   
            emotional: '#a2dcd1',  
            intellectual: '#275653' 
        }
    }
];
  

const supportPhrases = {
  physical: [
      "—Ç–æ—á–Ω–æ –∑–∞–º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –Ω–∞ —Å–ø–æ—Ä—Ç!",
      "–º–æ–≥—É—Ç –∑–∞—Ç–∞—â–∏—Ç—å –Ω–∞ –ø—Ä–æ–±–µ–∂–∫—É üí®",
      "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ",
      "–≤–¥–æ—Ö–Ω–æ–≤—è—Ç –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
      "–ø–æ–º–æ–≥—É—Ç –≤–∑–±–æ–¥—Ä–∏—Ç—å—Å—è –∏ —Ä–∞–∑–º—è—Ç—å—Å—è"
  ],
  emotional: [
      "–ø–æ–¥–∞—Ä—è—Ç –ø–æ–∑–∏—Ç–∏–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
      "–ø–æ–¥–Ω–∏–º—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üí´",
      "–∑–∞–∂–≥—É—Ç –Ω–∞ –¥—É—à–µ–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä",
      "—Å–æ–∑–¥–∞–¥—É—Ç —Ç—ë–ø–ª—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ä—è–¥–æ–º",
      "–ø–æ–º–æ–≥—É—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ"
  ],
  intellectual: [
      "–ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∫–∏ üß©",
      "–≤—Ç–∞—â–∞—Ç –≤ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
      "–ø–æ–¥—Å–∫–∞–∂—É—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
      "–º–æ–≥—É—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É",
      "—Ç–æ—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ—è—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
  ]
};

const biorhythmTypes = [
    { id: 'physical', name: '–§–∏–∑–∏—á–µ—Å–∫–∏–π', cycle: 23 },
    { id: 'emotional', name: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π', cycle: 28 },
    { id: 'intellectual', name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π', cycle: 33 }
];
  
const dateInput = document.querySelector("#target-date");
const rangeInput = document.getElementById("range-days");
const canvas = document.getElementById("biorhythm-chart");
const ctx = canvas.getContext("2d");
const peopleCheckboxes = document.getElementById("people-checkboxes");
  
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –ª—é–¥–µ–π
people.forEach(person => {
    const label = document.createElement('label');
    label.innerHTML = `
        <input type="checkbox" class="person-checkbox" value="${person.id}" checked>
        <span class="checkmark"></span>
        <span class="person-name" style="color: ${person.colors.physical}">${person.name}</span>
    `;
    peopleCheckboxes.appendChild(label);
});

  
const today = new Date();
dateInput.value = today.toISOString().split("T")[0];
  
function fixCanvasDPI() {
    const dpr = window.devicePixelRatio || 1;
    const rect = canvas.getBoundingClientRect();
    canvas.width = Math.round(rect.width * dpr);
    canvas.height = Math.round(rect.height * dpr);
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0); // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
}

  
function calculateDays(birthDate, targetDate) {
    const diffMs = targetDate - new Date(birthDate);
    const msPerDay = 24 * 60 * 60 * 1000;
    return diffMs / msPerDay;
}
  
function calculateBiorhythm(days, cycle) {
    return Math.sin((2 * Math.PI * days) / cycle);
}
  
function drawAxes(centerY, width, height, range, targetDate) {
    const marginX = 20;
  
    // –û—Å—å X
    ctx.strokeStyle = "#bbb";
    ctx.lineWidth = 1;
    ctx.setLineDash([]);
    ctx.beginPath();
    ctx.moveTo(0, centerY);
    ctx.lineTo(width, centerY);
    ctx.stroke();
  
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const highlightX = marginX + (range / (range * 2)) * (width - 2 * marginX);
    ctx.strokeStyle = "#888";
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(highlightX, 0);
    ctx.lineTo(highlightX, height);
    ctx.stroke();
  
    // –ü–æ–¥–ø–∏—Å–∏ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
    const approxLabelSpacing = 60;
    const maxLabels = Math.floor((width - 2 * marginX) / approxLabelSpacing);
    const stepX = Math.max(1, Math.floor((range * 2) / maxLabels));
    const totalSteps = Math.floor((range * 2) / stepX);
  
    ctx.font = "14px sans-serif";
    ctx.fillStyle = "#aaa";
    ctx.textAlign = "center";
  
    for (let i = 0; i <= totalSteps; i++) {
        const dayOffset = -range + i * stepX;
        const x = marginX + ((dayOffset + range) / (range * 2)) * (width - 2 * marginX);
        const labelDate = new Date(targetDate);
        labelDate.setDate(labelDate.getDate() + dayOffset);
        const label = labelDate.toLocaleDateString("ru-RU").slice(0, 5);
        ctx.fillText(label, x, centerY + 24);
    }
  
    // –ü–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ Y
    ctx.textAlign = "left";
    const ySteps = 4;
    for (let i = -ySteps; i <= ySteps; i++) {
        const y = centerY - (i / ySteps) * (height * 0.4);
        ctx.fillStyle = "#999";
        ctx.fillText((i / ySteps).toFixed(1), 5, y - 2);
    }
}
  
let animationFrame;
let currentFrame = 0;
const maxFrames = 60;
let prevData = [];
  
function drawGraph() {
    cancelAnimationFrame(animationFrame);
    currentFrame = 0;
    fixCanvasDPI();
  
    const targetDate = new Date(dateInput.value);
    const range = parseInt(rangeInput.value) || 5;
    const width = canvas.getBoundingClientRect().width;
    const height = canvas.getBoundingClientRect().height;
    const centerY = height / 2;
    const amplitude = height * 0.4;
    const marginX = 20;
  
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª—é–¥–µ–π –∏ —Ç–∏–ø—ã –±–∏–æ—Ä–∏—Ç–º–æ–≤
    const selectedPeople = people.filter(person => 
        document.querySelector(`.person-checkbox[value="${person.id}"]`).checked
    );
    
    const selectedBiorhythms = biorhythmTypes.filter(type => 
        document.querySelector(`.biorhythm-type[value="${type.id}"]`).checked
    );
  
    const newData = [];
    
    selectedPeople.forEach(person => {
        const baseDaysPassed = calculateDays(person.birthday, targetDate);
        const personData = [];
        
        selectedBiorhythms.forEach(biorhythm => {
            const data = [];
            for (let x = 0; x <= width; x++) {
                const plotX = marginX + (x / width) * (width - 2 * marginX);
                const dayOffset = ((plotX - marginX) / (width - 2 * marginX)) * range * 2 - range;
                const daysPassed = baseDaysPassed + dayOffset;
                const value = calculateBiorhythm(daysPassed, biorhythm.cycle);
                const y = centerY - value * amplitude;
                data.push(y);
            }
            personData.push(data);
        });
        
        newData.push({
            person,
            biorhythms: selectedBiorhythms,
            data: personData
        });
    });
  
    if (!prevData.length) {
        prevData = newData;
    }
  
    function animate() {
        ctx.clearRect(0, 0, width, height);
        drawAxes(centerY, width, height, range, targetDate);
    
        ctx.lineWidth = 1.8;
        ctx.lineCap = "round";
    
        newData.forEach((personObj, personIdx) => {
            const person = personObj.person;
            const biorhythms = personObj.biorhythms;
            
            biorhythms.forEach((biorhythm, bioIdx) => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –±–∏–æ—Ä–∏—Ç–º–∞
                ctx.strokeStyle = person.colors[biorhythm.id];
                ctx.beginPath();
                
                for (let x = 0; x <= width; x++) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–æ—Ä–∏—Ç–º–∞
                    const prevBioData = prevData[personIdx]?.data?.[bioIdx];
                    const y = prevBioData ? prevBioData[x] : personObj.data[bioIdx][x];
                    const targetY = personObj.data[bioIdx][x];
                    const currentY = prevBioData 
                        ? y + (targetY - y) * (currentFrame / maxFrames)
                        : targetY;
                    
                    if (x === 0) ctx.moveTo(x, currentY);
                    else ctx.lineTo(x, currentY);
                }
                ctx.stroke();
            });
        });
    
        if (currentFrame < maxFrames) {
            currentFrame++;
            animationFrame = requestAnimationFrame(animate);
        } else {
            prevData = newData;
            currentFrame = 0;
        }
    }
  
    animate();
}
  
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
dateInput.addEventListener("input", drawGraph);
rangeInput.addEventListener("input", drawGraph);
  
rangeInput.addEventListener("blur", () => {
    if (!rangeInput.value || isNaN(parseInt(rangeInput.value))) {
        rangeInput.value = 5;
        drawGraph();
    }
});
  
window.addEventListener("resize", drawGraph());
  
// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
document.querySelectorAll('.person-checkbox, .biorhythm-type').forEach(checkbox => {
    checkbox.addEventListener('change', drawGraph);
});
  
// –°–æ–∑–¥–∞–µ–º —Ç—É–ª—Ç–∏–ø
const tooltip = document.createElement("div");
tooltip.className = "tooltip";
tooltip.style.display = "none";
document.body.appendChild(tooltip);
  
canvas.addEventListener("mousemove", (e) => {
    const rect = canvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
  
    const width = rect.width;
    const height = rect.height;
    const centerY = height / 2;
    const amplitude = height * 0.4;
    const marginX = 20;
  
    const targetDate = new Date(dateInput.value);
    const range = parseInt(rangeInput.value) || 5;
  
    const dayOffset = ((mouseX - marginX) / (width - 2 * marginX)) * range * 2 - range;
    const currentDate = new Date(targetDate);
    currentDate.setDate(currentDate.getDate() + dayOffset);
  
    const selectedPeople = people.filter(person => 
        document.querySelector(`.person-checkbox[value="${person.id}"]`).checked
    );
    
    const selectedBiorhythms = biorhythmTypes.filter(type => 
        document.querySelector(`.biorhythm-type[value="${type.id}"]`).checked
    );
  
    let tooltipContent = `<div>${currentDate.toLocaleDateString('ru-RU')}</div>`;
    let hasContent = false;
  
    selectedPeople.forEach(person => {
        const daysPassed = calculateDays(person.birthday, currentDate);
        
        selectedBiorhythms.forEach(biorhythm => {
            const value = calculateBiorhythm(daysPassed, biorhythm.cycle);
            const y = centerY - value * amplitude;
            
            if (Math.abs(mouseY - y) < 6) {
                hasContent = true;
                const color = person.colors[biorhythm.id];
                tooltipContent += `<div><span style="color:${color};">${person.name} ${biorhythm.name}:</span> ${Math.round(value * 100)}%</div>`;
            }
        });
    });
  
    if (hasContent) {
        tooltip.innerHTML = tooltipContent;
        tooltip.style.display = "block";
        tooltip.style.left = e.pageX + 15 + "px";
        tooltip.style.top = e.pageY - 40 + "px";
    } else {
        tooltip.style.display = "none";
    }
});
  
canvas.addEventListener("mouseout", () => {
    tooltip.style.display = "none";
});
  
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
document.getElementById('clear-people').addEventListener('click', () => {
    document.querySelectorAll('.person-checkbox').forEach(checkbox => {
      checkbox.checked = false;
    });
    drawGraph();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    const btn = document.getElementById('clear-people');
    btn.classList.add('shake');
    setTimeout(() => btn.classList.remove('shake'), 500);
  });

  document.getElementById('show-all-people').addEventListener('click', () => {
    document.querySelectorAll('.person-checkbox').forEach(checkbox => {
      checkbox.checked = true;
    });
    drawGraph();
  
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞–∫ —É clear)
    const btn = document.getElementById('show-all-people');
    btn.classList.add('shake');
    setTimeout(() => btn.classList.remove('shake'), 500);
  });
  

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –±–∏–æ—Ä–∏—Ç–º–æ–≤
function analyzeCorrelation() {
    const targetDate = new Date(dateInput.value);
    const selectedPeople = people.filter(person => 
        document.querySelector(`.person-checkbox[value="${person.id}"]`).checked
    );
    
    const selectedBiorhythms = biorhythmTypes.filter(type => 
        document.querySelector(`.biorhythm-type[value="${type.id}"]`).checked
    );
    
    if (selectedPeople.length < 2 || selectedBiorhythms.length === 0) {
        return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –±–∏–æ—Ä–∏—Ç–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.";
    }
    
    const daysPassed = selectedPeople.map(person => 
        calculateDays(person.birthday, targetDate)
    );
    
    const results = [];
    const threshold = 0.2; // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (20%)
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –ª—é–¥–µ–π
    for (let i = 0; i < selectedPeople.length; i++) {
        for (let j = i + 1; j < selectedPeople.length; j++) {
            const person1 = selectedPeople[i];
            const person2 = selectedPeople[j];
            
            selectedBiorhythms.forEach(biorhythm => {
                const value1 = calculateBiorhythm(daysPassed[i], biorhythm.cycle);
                const value2 = calculateBiorhythm(daysPassed[j], biorhythm.cycle);
                const diff = Math.abs(value1 - value2);
                
                if (diff <= threshold) {
                    const similarity = Math.round((1 - diff) * 100);
                    const avgValue = (value1 + value2) / 2;
                    
                    let advice = "";
                    
if (biorhythm.id === 'physical') {
    if (avgValue > 0.7) {
        advice = `üí™ –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ó–û–ñ:\n` +
                `- –í–∫–ª—é—á–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, HIIT)\n` +
                `- –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å –π–æ–≥–∏ –ø–æ –≤–∏–¥–µ–æ\n` +
                `- –£—Å—Ç—Ä–æ–π—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤ (–º–∏–Ω–∏–º—É–º 10–∫)\n`
    } else if (avgValue > 0.3) {
        advice = `üëç –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n` +
                `- –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞\n` +
                `- –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–æ–π (–æ–±—Å—É–¥–∏—Ç–µ –ø–æ—Ç–æ–º)\n` +
                `- –†–∞–∑–º–∏–Ω–∫–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n` 
    } else if (avgValue < -0.7) {
        advice = `üõå –î–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n` +
                `- –°–¥–µ–ª–∞–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ\n` +
                `- –ü—Ä–∏–º–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à (–¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏)\n`
    }
} 
else if (biorhythm.id === 'emotional') {
    if (avgValue > 0.7) {
        advice = `‚ù§Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å:\n` +
                `- –ü—Ä–æ–≤–µ–¥–∏—Ç–µ "—Å–µ—Ä–¥–µ—á–Ω—ã–π –∫—Ä—É–≥": –ø–æ –æ—á–µ—Ä–µ–¥–∏ –¥–µ–ª–∏—Ç–µ—Å—å —Ç–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—Ç–µ\n`;
    } else if (avgValue > 0.3) {
        advice = `üòä –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ:\n` +
                `- –û–±–º–µ–Ω—è–π—Ç–µ—Å—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞–º–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö\n`
    } else if (avgValue < -0.7) {
        advice = `üßò‚Äç‚ôÄÔ∏è –≠–Ω–µ—Ä–≥–∏–∏ –º–∞–ª–æ - –±–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è:\n` +
                `- –ü–æ—Å–ª—É—à–∞–π—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞\n` 
    }
} 
else if (biorhythm.id === 'intellectual') {
    if (avgValue > 0.7) {
        advice = `üöÄ –ü–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —É—á–µ–±—ã:\n` +
                `- –°–æ–≤–º–µ—Å—Ç–Ω—ã–π coding session (VS Code Live Share)\n` +
                `- –†–∞–∑–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É\n` +
                `- –†–µ—à–∏—Ç–µ 3 –∑–∞–¥–∞—á–∏ –Ω–∞ LeetCode –≤–º–µ—Å—Ç–µ`;
    } else if (avgValue > 0.3) {
        advice = `üìö –•–æ—Ä–æ—à–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:\n` +
                `- –°–¥–µ–ª–∞–π—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –Ω–æ–≤–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É\n` +
                `- –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ`;
    } else if (avgValue < -0.7) {
        advice = `üéì –õ–µ–≥–∫–∞—è —É—á–µ–±–∞:\n` +
                `- –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞\n` +
                `- –°—ã–≥—Ä–∞–π—Ç–µ –≤ "–ê–ª–∏–∞—Å" —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏\n` +
                `- –ü–æ—Å–ª—É—à–∞–π—Ç–µ –ø–æ–¥–∫–∞—Å—Ç –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏`;
    }
}

// –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π
if (avgValue >= -0.3 && avgValue <= 0.3) {
    advice = `‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞:\n` +
            `- –û–±–Ω–æ–≤–∏—Ç–µ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫\n` +
            `- –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —É—á–µ–±–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü\n` +
            `- –°–¥–µ–ª–∞–π—Ç–µ –æ–±–∑–æ—Ä —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ GitHub`;
}

// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω—Ç–∏-–¥–æ—Ñ–∞–º–∏–Ω–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã
if (avgValue < -0.5) {
    advice += `üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è:\n` +
              `- –ë–µ—Å—Ü–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ —Å–æ—Ü—Å–µ—Ç–µ–π\n` +
              `- –ú—É–ª—å—Ç–∏—Ç–∞—Å–∫–∏–Ω–≥–∞ –±–µ–∑ —á–µ—Ç–∫–æ–π —Ü–µ–ª–∏`;
}
                    
                    results.push({
                        person1: person1.name,
                        person2: person2.name,
                        biorhythm: biorhythm.name,
                        similarity: similarity,
                        value1: Math.round(value1 * 100),
                        value2: Math.round(value2 * 100),
                        advice: advice
                    });
                }
            });
        }
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function generateRecommendations() {
    const targetDate = new Date(dateInput.value);
    const selectedPeople = people.filter(person => 
        document.querySelector(`.person-checkbox[value="${person.id}"]`).checked
    );
    
    const selectedBiorhythms = biorhythmTypes.filter(type => 
        document.querySelector(`.biorhythm-type[value="${type.id}"]`).checked
    );
    
    if (selectedPeople.length === 0 || selectedBiorhythms.length === 0) {
        return "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ–¥–∏–Ω —Ç–∏–ø –±–∏–æ—Ä–∏—Ç–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.";
    }
    
    const recommendations = [];
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ª—é–¥—è–º –∏ –±–∏–æ—Ä–∏—Ç–º–∞–º
const allData = selectedPeople.map(person => {
  const daysPassed = calculateDays(person.birthday, targetDate);
  const rhythms = {};
  selectedBiorhythms.forEach(bio => {
      rhythms[bio.id] = {
          value: calculateBiorhythm(daysPassed, bio.cycle),
          percent: Math.round(calculateBiorhythm(daysPassed, bio.cycle) * 100)
      };
  });
  return {
      name: person.name,
      id: person.id,
      rhythms: rhythms
  };
});
    
selectedPeople.forEach(person => {
  const personData = allData.find(p => p.id === person.id);
  const personRecommendations = [];

  selectedBiorhythms.forEach(biorhythm => {
      const value = personData.rhythms[biorhythm.id].value;
      const percent = personData.rhythms[biorhythm.id].percent;

      let recommendation = "";
      let emoji = "";

      if (biorhythm.id === 'physical') {
          if (percent > 70) {
              recommendation = `–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –ø—Ä–æ–±–µ–∂–∫—É –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö.`;
              emoji = "üí™";
          } else if (percent > 30) {
              recommendation = `–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.`;
              emoji = "üëç";
          } else if (percent > -30) {
              recommendation = `–§–∏–∑–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ. –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Ä–∞–±–æ—Ç–µ.`;
              emoji = "üòê";
          } else if (percent > -70) {
              recommendation = `–§–∏–∑–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–∏–∑–∫–∞—è. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.`;
              emoji = "üòï";
          } else {
              recommendation = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å.`;
              emoji = "üò´";
          }
      } 
      else if (biorhythm.id === 'emotional') {
          if (percent > 70) {
              recommendation = `–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—ä–µ–º! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—â–µ–Ω–∏—è, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤.`;
              emoji = "üòä";
          } else if (percent > 30) {
              recommendation = `–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.`;
              emoji = "üôÇ";
          } else if (percent > -30) {
              recommendation = `–≠–º–æ—Ü–∏–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ. –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ —ç–º–æ—Ü–∏—è—Ö.`;
              emoji = "üòê";
          } else if (percent > -70) {
              recommendation = `–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∞–¥. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ –æ–±—â–µ–Ω–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.`;
              emoji = "üòû";
          } else {
              recommendation = `–ì–ª—É–±–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–∑–∏—Å. –°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ –ø–æ–±—ã—Ç—å –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ.`;
              emoji = "üò¢";
          }
      } 
      else if (biorhythm.id === 'intellectual') {
          if (percent > 70) {
              recommendation = `–ü–∏–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –†–µ—à–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, —É—á–∏—Ç–µ—Å—å, —Ç–≤–æ—Ä–∏—Ç–µ.`;
              emoji = "üß†";
          } else if (percent > 30) {
              recommendation = `–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —É–º—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.`;
              emoji = "ü§î";
          } else if (percent > -30) {
              recommendation = `–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –†—É—Ç–∏–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞.`;
              emoji = "üìù";
          } else if (percent > -70) {
              recommendation = `–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∞–¥. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.`;
              emoji = "üò¥";
          } else {
              recommendation = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –û—Ç–¥—ã—Ö –¥–ª—è –º–æ–∑–≥–∞.`;
              emoji = "üõå";
          }
      }

      if (percent < -30) {
        const helpers = allData.filter(other =>
            other.id !== person.id &&
            other.rhythms[biorhythm.id].percent > 50
        ).map(h => h.name);
    
        if (helpers.length > 0) {
            const phrasePool = supportPhrases[biorhythm.id];
            const phrase = phrasePool[Math.floor(Math.random() * phrasePool.length)];
    
            let helperText = "";
            if (helpers.length === 1) {
                helperText = `${helpers[0]} ${phrase}.`;
            } else {
                const last = helpers.pop();
                const names = helpers.join(', ') + ' –∏ ' + last;
                helperText = `${names} ${phrase}`;
            }
    
            recommendation += " " + helperText;
        }
    }
    

      personRecommendations.push({
          biorhythm: biorhythm.name,
          percent: percent,
          recommendation: recommendation,
          emoji: emoji
      });
  });

  recommendations.push({
      person: person.name,
      recommendations: personRecommendations
  });
});
    
    return recommendations;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function showCorrelationModal() {
    const correlationData = analyzeCorrelation();
    const modal = document.getElementById('correlation-modal');
    const content = document.getElementById('correlation-content');
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
    content.scrollTop = 0;
    
    if (typeof correlationData === 'string') {
        content.innerHTML = `<p>${correlationData}</p>`;
    } else if (correlationData.length === 0) {
        content.innerHTML = `<p>–ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –±–∏–æ—Ä–∏—Ç–º–∞–º–∏.</p>`;
    } else {
        let html = '';
        correlationData.forEach(item => {
            html += `
                <div class="correlation-item">
                   <h3>
  <span style="color: #d5a2ff">${item.person1} (${item.value1}%)</span> 
  <span> –∏ </span> 
  <span style="color: #d5a2ff">${item.person2} (${item.value2}%)</span>
</h3>
                    <p><strong>${item.biorhythm} –±–∏–æ—Ä–∏—Ç–º:</strong> —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ ${item.similarity}%</p>
                    <div class="advice">${item.advice.replace(/\n/g, '<br>')}</div>
                </div>
            `;
        });
        content.innerHTML = html;
    }
    
    modal.style.display = 'block';
}

function showRecommendationsModal() {
    const recommendationsData = generateRecommendations();
    const modal = document.getElementById('recommendations-modal');
    const content = document.getElementById('recommendations-content');
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
    content.scrollTop = 0;
    
    if (typeof recommendationsData === 'string') {
        content.innerHTML = `<p>${recommendationsData}</p>`;
    } else {
        let html = '';
        recommendationsData.forEach(person => {
            html += `<h3 style="color: #d5a2ff">${person.person}</h3>`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            person.recommendations.forEach(rec => {
                html += `
                    <div class="recommendation-item">
                        <p>
                            <strong style="color: ${rec.color}">${rec.biorhythm} –±–∏–æ—Ä–∏—Ç–º: ${rec.percent}%</strong> 
                            ${rec.emoji}
                        </p>
                        <p>${rec.recommendation}</p>
                    </div>
                `;
            });
        });
        content.innerHTML = html;
    }
    
    modal.style.display = 'block';
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
document.getElementById('show-correlation').addEventListener('click', showCorrelationModal);
document.getElementById('show-recommendations').addEventListener('click', showRecommendationsModal);

document.querySelectorAll('.close').forEach(closeBtn => {
    closeBtn.addEventListener('click', function() {
        this.closest('.modal').style.display = 'none';
    });
});

window.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.style.display = 'none';
    }
});

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
drawGraph();